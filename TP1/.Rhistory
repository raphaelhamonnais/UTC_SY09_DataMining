CMO
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), xlab = "CMB$FL & CMO$FL")
CFB <- CF[Male == Blue,]
CFB
CFB <- CF[Female == Blue,]
CFB
CF <- crabsquant[Female,]
CF
Female
Blue
female == Blue
Female == Blue
Female
Orange
CFO <- CF[Female == Orange,]
CFO
CFB <- CF[!Female == Orange,]
CFB
boxplot(CFB$FL,CFO$FL,col = c("blue","orange"), xlab = "CFB$FL & CFO$FL")
boxplot(CFB$RW,CFO$RW,col = c("blue","orange"), xlab = "CFB$RW & CFO$RW")
plot(crabsquant)
plot(crabsquant[Male,]~crabsquant[Female,])
plot(crabsquant[Male,],crabsquant[Female,])
plot(crabsquant[Male,])
plot(crabsquant[Male,],col("blue"))
plot(crabsquant[Male,],col(blue))
crabsquant
names(crabsquant)
plot(names(crabsquant),c(crabsquant[Male,],crabsquant[Female,]),col = "red, blue")
CM
CF
length(CM)
dim(CM)
dim(CF)
plot(names(crabsquant),(crabsquant[Male,],crabsquant[Female,]),col = "red, blue")
plot(names(crabsquant),(crabsquant[Male,],crabsquant[Female,])),col = "red, blue")
plot(names(crabsquant),(crabsquant[Male,] crabsquant[Female,])),col = "red, blue")
plot(names(crabsquant),crabsquant[Male,], crabsquant[Female,]),col = "red, blue")
plot(names(crabsquant),crabsquant[Male,],col = "red")
plot(crabsquant[Male,])
plot(CM, col = "red")
plot(CM[Blue,], col = "red")
plot(CM[Blue,], col = "red")
plot(CM[Blue,], col = "blue")
plot(CMB, col = "blue")
plot(CM, col = "blue")
plot(CMB, col = "blue")
plot(CMB, col = "blue")
par(new = TRUE)
plot(CMO, col = "orange")
plot(CMO, col = "orange")
plot(CMB, col = "blue")
par(new = T)
plot(CMO, col = "orange")
cor.test(CMB,CMO)
class(CMB)
plot(rbind(CMB,CMO), col = c("blue", "orange"))
plot(rbind(CFB,CFO), col = c("blue","orange"))
plot(rbind(CB,CO), col = c("blue", "orange"))
plot(rbind(CM,CF), col = c("blue","orange"))
plot(rbind(CM,CF), col = c("blue","orange"))
plot(rbind(CB,CO), col = c("blue", "orange"))
plot(rbind(CM,CF), col = c("blue","red"))
plot(rbind(CB,CO), col = c("blue", "orange"))
plot(rbind(CM,CF), col = c("blue","red"))
plot(rbind(CB,CO), col = c("blue", "orange"))
plot(rbind(CM,CF), col = c("blue","red"))
plot(rbind(CM,CF), col = c("blue","red"))
plot(rbind(CM,CF), col = c("blue","red"))
plot(rbind(CB,CO), col = c("blue", "orange"))
plot(cbind(CB,CO), col = c("blue", "orange"))
plot(cbind(CM,CF), col = c("blue","red"))
CB
rbind(CB,CO)
cor.test(CB,CO)
cor(CB,CO)
cor(CM,CF)
cor(crabsquant)
cor(crabsquant)
View(shorten)
help("cor")
cbind(CB,CO)
rbind(CB,CO)
CB
plot(rbind(CB,CO), col = c("blue", "orange"))
rbind(CM,CF)
plot(rbind(CM,CF), col = c("blue","red"))
plot(CB, col = "blue")
plot(CO, col = "orange")
par(new = TRUE)
plot(CB, col = "blue")
plot(CB, col = "blue")
par(new = TRUE)
plot(CO, col = "orange")
plot(CO, col = "orange")
plot(CB, col = "blue")
plot(CO, col = "orange")
c(CB,CO)
plot(CB, col = "blue")
CB
summary(CB)
plot(CB, col = "blue", xlim = (0:55), ylim = (0:55))
plot(CB, col = "blue", xlim = c(0:55), ylim = c(0:55))
plot(crabs$sex,crabs$CL)
plot(crabs[,4:8],bg=c("red","green3")[crabs[,2]],
pch=c(21,22)[crabs[,2]],  labels=c("Frontal lob size","Rear width",
"Carapace length","Carapace width", "body depth")
)
plot(crabsquant,bg=c("blue","orange")[crabs[,2]],pch=c(21,22)[crabs[,2]])
plot(crabsquant,col=c("blue","orange")[crabs[,2]],pch=c(21,22)[crabs[,2]])
crabs[,2]
plot(crabsquant,col=c("blue","orange")[crabs$sex],pch=c(21,22)[crabs[,2]])
plot(crabsquant,col=c("blue","orange")[crabs$sex])
plot(crabsquant,col=c("blue","orange")[crabs$sp])
plot(crabsquant,col=c("blue","orange")[crabs$sp])
plot(crabsquant,col=c("blue","red")[crabs$sp])
plot(crabsquant,col=c("blue","orange")[crabs$sex])
dev.off()
plot(crabsquant,col=c("blue","red")[crabs$sp])
plot(crabsquant,col=c("blue","orange")[crabs$sex])
plot(crabsquant,col=c("blue","red")[crabs$sp])
plot(crabsquant,col=c("blue","orange")[crabs$sex])
plot(crabsquant,col=c("black","red")[crabs$sex])
plot(crabsquant,col = c("blue","orange")[crabs$sp])
FL
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), xlab = "CMB$FL & CMO$FL")
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), xlab = "CMB$FL & CMO$FL", names = "male, femelle")
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), xlab = "CMB$FL & CMO$FL", names = "male, femelle")
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), xlab = "CMB$FL & CMO$FL", names = c("male, femelle")
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), xlab = "CMB$FL & CMO$FL", names = c("male, femelle"))
boxplot(CMB$RW,CMO$RW,col = c("blue","orange"), xlab = "CMB$RW & CMO$RW")
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), xlab = "CMB$FL & CMO$FL")
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), main = "Comparaison de la variable selon l'espèce")
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), main = "Comparaison de la variable FL selon l'espèce", labels = c("B","O"))
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), main = "Comparaison de la variable FL selon l'espèce", labels = c("B","O"))
boxplot(CMB$FL,CMO$FL,col = c("blue","orange"), main = "Comparaison de la variable FL selon l'espèce", label = c("B","O"))
boxplot(crabsquant~FL+,col = c("blue","orange"), main = "Comparaison de la variable FL selon l'espèce")
boxplot(crabsquant~FL+RW,col = c("blue","orange"), main = "Comparaison de la variable FL selon l'espèce")
boxplot(crabsquant~crabsquant$FL+crabsquant$RW,col = c("blue","orange"), main = "Comparaison de la variable FL selon l'espèce")
boxplot(CFB$FL,CFO$FL,col = c("blue","orange"), xlab = "Comparaison de la variable FL selon l'espèce")
boxplot(CFB$FL,CFO$FL,col = c("blue","orange"), main = "Comparaison de la variable FL selon l'espèce")
boxplot(CFB$FL)
boxplot(CFB$FL)
boxplot(CFB$FL~crabs$sex)
boxCFB
VFB
CFB
boxplot(CBM$FL,CBF$FL,col = c("blue","blue"), main = "Comparaison de la variable FL selon le sex")
help(plot)
Pima <- read.csv("E:/study/UTC/GI05/SY09/TD/TD1/donnees/Pima.csv",header = T)
summary(Pima)
plot(Pima)
Pima$z <- factor(Pima$z)
dim(Pima)
Pima
Pima <- Pima[,-1]
Pima
Pima <- Pima[,-8]
Pima
Pima <- Pima[,-9]
Pima
Pima <- Pima[,1:8]
Pima
Pima <- Pima[,nrow(Pima)]
Pima
nrow(Pima)
ncol(Pima)
Pima <- Pima[,-ncol(Pima)]
Pima
head(Pima)
summary(Pima)
Pima <- read.csv("E:/study/UTC/GI05/SY09/TD/TD1/donnees/Pima.csv",header = T)
summary(Pima)
Pima <- Pima[,-ncol(Pima)]
Pima
head(Pima)
summary(Pima)
sort(Pima$npreg)
sort(Pima$bp)
hist(Pima$npreg)
plot(density(pima$glu))
plot(density(Pima$glu))
plot(sort(Pima$bp))
plot(ped~bp,Pima)
plot(Pima$bp~Pima$npreg)
plot(Pima$ped~Pima$bp)
plot(ped~bp,Pima)
plot(Pima$ped~Pima$bp)
plot(ped~bp,Pima)
plot(Pima$ped~Pima$bp)
plot(Pima$ped~Pima$glu)
boxplot(Pima$ped~Pima$glu)
cor(Pima)
notes <- read.csv("E:/study/UTC/GI05/SY09/TD/TD1/donnees/sy02-p2016.csv", na.strings="", header=T)
notes$nom <- factor(notes$nom, levels=notes$nom)
notes$niveau <- factor(notes$niveau, ordered=T)
notes$resultat <- factor(notes$resultat, levels=c("F","Fx","E","D","C","B","A"),
ordered=T)
plot(notes)
plot(notes)
summary(notes)
boxplot(notes)
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
moy.median
plot(moy.median)
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
names(moy.median) <- c("correcteur","moy.median")
std.median <- aggregate(note.median~correcteur.median, data=notes, FUN=sd)
names(std.median) <- c("correcteur","std.median")
median <- merge(moy.median, std.median)
median
moy.median
std.median
median
moy.final <- aggregate(note.final~correcteur.final, data=notes, FUN=mean)
names(moy.final) <- c("correcteur","moy.final")
moy.final
std.final <- aggregate(note.final~correcteur.final, data=notes, FUN=sd)
names(std.final) <- c("correcteur","std.final")
std.final
final <- merge(moy.final, std.final)
final
correcteurs <- merge(median, final, all=T)
correcteurs
median
final
correcteurs
corr.acp <- correcteurs[-c(2,3),]
corr.acp
corr.acp <- correcteurs[-c(2,7),]
corr.acp
corr.acp <- correcteurs[-c(2,8),]
corr.acp
princomp(notes)
notes
princomp(corr.acp)
corr.acp
corr.acp <- correcteurs[-c(2,8),-1]
corr.acp
princomp(corr.acp)
corr.acp <- correcteurs[-c(2,8),]
corr.acp
princomp(corr.acp[,-1])
summary(notes)
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
moy.median
names(moy.median) <- c("correcteur","moy.median")
moy.median
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
moy.median
class(moy.median)
correcteurs
median
final
merge(medin,fianl)
merge(median,fianl)
merge(median,fianal)
merge(median,final)
correcteurs <- merge(median, final)
correcteurs
notes
View(crabsquant)
notes$correcteur.median <- factor(notes$correcteur.median,
levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes$correcteur.final <- factor(notes$correcteur.final,
levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes <- read.csv("E:/study/UTC/GI05/SY09/TD/TD1/donnees/sy02-p2016.csv", na.strings="", header=T)
notes$nom <- factor(notes$nom, levels=notes$nom)
notes$niveau <- factor(notes$niveau, ordered=T)
notes$correcteur.median <- factor(notes$correcteur.median,
levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes$correcteur.final <- factor(notes$correcteur.final,
levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes$resultat <- factor(notes$resultat, levels=c("F","Fx","E","D","C","B","A"),
ordered=T)
boxplot(notes)
summary(notes)
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
names(moy.median) <- c("correcteur","moy.median")
moy.median
std.median <- aggregate(note.median~correcteur.median, data=notes, FUN=sd)
names(std.median) <- c("correcteur","std.median")
std.median
median <- merge(moy.median, std.median)
median
moy.final <- aggregate(note.final~correcteur.final, data=notes, FUN=mean)
names(moy.final) <- c("correcteur","moy.final")
moy.final
std.final <- aggregate(note.final~correcteur.final, data=notes, FUN=sd)
names(std.final) <- c("correcteur","std.final")
std.final
final <- merge(moy.final, std.final)
final
correcteurs <- merge(median, final, all=T)
correcteurs
corr.acp
corr.acp_new = corr.acp[, -1]
corr.acp_new
c = cbind(1:8, 1:8)
c
cov.wt(x, method = "ML")
cov.wt(c, method = "ML")
eigen(y$cov)
eigen(y$cov)
x = cbind(1:8, 1:8)
x
y = cov.wt(x, method = "ML")
eigen(y$cov)
y
eigen(y$cov)
scale(x, center = TRUE, scale = TRUE)
scale(x, center = TRUE, scale = TRUE) %*% (y$cov)
notes <- read.csv("data/sy02-p2016.csv", na.strings="", header=T)
notes$nom <- factor(notes$nom, levels=notes$nom)
notes$niveau <- factor(notes$niveau, ordered=T)
notes$resultat <- factor(notes$resultat, levels=c("F","Fx","E","D","C","B","A"),
ordered=T)
notes$correcteur.median <- factor(notes$correcteur.median, levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes$correcteur.final <- factor(notes$correcteur.final, levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
boxplot(notes)
summary(notes)
###########################################
# 2.1 Exercice th茅orique
#calculer les moyennes des notes m茅dian corrig茅es par chaque correcteur
#aggregate: Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
#renommer la dataframe 鈥渕oy.median鈥?
moy.median
names(moy.median) <- c("correcteur","moy.median")
moy.median
#calculer les 茅cart-types des notes m茅dian corrig茅es par chaque correcteur
std.median <- aggregate(note.median~correcteur.median, data=notes, FUN=sd)
names(std.median) <- c("correcteur","std.median")
std.median
#mettre deux datadframe ensemble
median <- merge(moy.median, std.median)
median
#calculer les moyennes des notes finales corrig茅es par chaque correcteur
moy.final <- aggregate(note.final~correcteur.final, data=notes, FUN=mean)
names(moy.final) <- c("correcteur","moy.final")
moy.final
#calculer les 茅carts types des notes finales corrig茅es par chaque correcteur
std.final <- aggregate(note.final~correcteur.final, data=notes, FUN=sd)
names(std.final) <- c("correcteur","std.final")
std.final
final <- merge(moy.final, std.final)
final
correcteurs <- merge(median, final, all=T)
# supprimer deux lignes avec des resultats NAs
correcteurs
corr.acp <- correcteurs[-c(2,3),] # on peut aussi faire merge(median, final) sans le "all=T"
corr.acp
# 1. Calculer les axes factoriels de l鈥橝CP du nuage de points d茅fini
# par les quatre variables quantitatives.
# Quels sont les pourcentages d鈥檌nertie expliqu茅e par chacun de ces axes ?
corr.acp <- corr.acp[,-c(1)] # ne prendre que les variables quantitatives
corr.acp
corr.acp.centered = scale(corr.acp, center = TRUE, scale = FALSE) # centrer les donn茅es en colonne
corr.acp.centered
corr.acp.covar = cov.wt(corr.acp.centered, method = "ML") # calcul de matrice de covariance avec centrage automatique
corr.acp.covar
corr.acp.covar.diago = eigen(corr.acp.covar$cov) # diagonaliser la covariance (pas les moyennes)
val_propres = corr.acp.covar.diago$values # valeurs propres = quantit茅s d'inertie expliqu茅e
vec_propres = corr.acp.covar.diago$vectors # vecteurs propres = vecteurs qui portent/expliquent les axes factoriels
# normalement matrice de covariance = corr.acp.covar.diago$vectors * corr.acp.covar.diago$values * t(corr.acp.covar.diago$vectors)
vec_propres %*% diag(val_propres) %*% t(vec_propres)
corr.acp.covar$cov
# on remarque que les deux sont egales, m锚me si le comparateur "==" ne marche pas car pas probl猫me de pr茅cision
# Calculer les axes factoriels de l鈥橝CP
# les axes factoriels sont donn茅s par les vecteurs propres situ茅s dans vec_propres : chaque colonne est un des vecteur propre
vec_propres
# les quantit茅s d'inertie expliqu茅es sont dans la variable val_propres
val_propres
# les pourcentages d'inerties sont simplement la quantit茅 / la somme de la quantit茅 totale d'inertie
pourcentage_inertie = val_propres / sum(val_propres) * 100
pourcentage_inertie
# 2. Calculer les composantes principales ; en d茅duire la repr茅sentation des quatre individus dans le premier plan factoriel.
ACP = corr.acp.centered %*% vec_propres
ACP # coordonn茅es des points sur le nouveau rep猫re des composantes principales = combinaisons lin茅aires des anciens axes
plot(ACP)
class(ACP)
plan(ACP)
princomp(corr.acp)
corr.acp
correcteurs
notes <- read.csv("data/sy02-p2016.csv", na.strings="", header=T)
notes$nom <- factor(notes$nom, levels=notes$nom)
notes$niveau <- factor(notes$niveau, ordered=T)
notes$resultat <- factor(notes$resultat, levels=c("F","Fx","E","D","C","B","A"),
ordered=T)
notes$correcteur.median <- factor(notes$correcteur.median, levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes$correcteur.final <- factor(notes$correcteur.final, levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
boxplot(notes)
summary(notes)
###########################################
# 2.1 Exercice th茅orique
#calculer les moyennes des notes m茅dian corrig茅es par chaque correcteur
#aggregate: Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form.
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
#renommer la dataframe 鈥渕oy.median鈥?
moy.median
names(moy.median) <- c("correcteur","moy.median")
moy.median
#calculer les 茅cart-types des notes m茅dian corrig茅es par chaque correcteur
std.median <- aggregate(note.median~correcteur.median, data=notes, FUN=sd)
names(std.median) <- c("correcteur","std.median")
std.median
#mettre deux datadframe ensemble
median <- merge(moy.median, std.median)
median
#calculer les moyennes des notes finales corrig茅es par chaque correcteur
moy.final <- aggregate(note.final~correcteur.final, data=notes, FUN=mean)
names(moy.final) <- c("correcteur","moy.final")
moy.final
#calculer les 茅carts types des notes finales corrig茅es par chaque correcteur
std.final <- aggregate(note.final~correcteur.final, data=notes, FUN=sd)
names(std.final) <- c("correcteur","std.final")
std.final
final <- merge(moy.final, std.final)
final
correcteurs <- merge(median, final, all=T)
# supprimer deux lignes avec des resultats NAs
correcteurs
corr.acp <- correcteurs[-c(2,3),] # on peut aussi faire merge(median, final) sans le "all=T"
corr.acp
corr.acp1 <- corr.acp[,-c(1)] # ne prendre que les variables quantitatives
corr.acp1
corr.acp.centered = scale(corr.acp1, center = TRUE, scale = FALSE) # centrer les donn茅es en colonne
corr.acp.centered
corr.acp.covar = cov.wt(corr.acp.centered, method = "ML") # calcul de matrice de covariance avec centrage automatique
corr.acp.covar
corr.acp.covar.diago = eigen(corr.acp.covar$cov) # diagonaliser la covariance (pas les moyennes)
val_propres = corr.acp.covar.diago$values # valeurs propres = quantit茅s d'inertie expliqu茅e
vec_propres = corr.acp.covar.diago$vectors # vecteurs propres = vecteurs qui portent/expliquent les axes factoriels
# normalement matrice de covariance = corr.acp.covar.diago$vectors * corr.acp.covar.diago$values * t(corr.acp.covar.diago$vectors)
vec_propres %*% diag(val_propres) %*% t(vec_propres)
corr.acp.covar$cov
# on remarque que les deux sont egales, m锚me si le comparateur "==" ne marche pas car pas probl猫me de pr茅cision
# Calculer les axes factoriels de l鈥橝CP
# les axes factoriels sont donn茅s par les vecteurs propres situ茅s dans vec_propres : chaque colonne est un des vecteur propre
vec_propres
# les quantit茅s d'inertie expliqu茅es sont dans la variable val_propres
val_propres
# les pourcentages d'inerties sont simplement la quantit茅 / la somme de la quantit茅 totale d'inertie
pourcentage_inertie = val_propres / sum(val_propres) * 100
pourcentage_inertie
# 2. Calculer les composantes principales ; en d茅duire la repr茅sentation des quatre individus dans le premier plan factoriel.
ACP = corr.acp.centered %*% vec_propres
ACP # coordonn茅es des points sur le nouveau rep猫re des composantes principales = combinaisons lin茅aires des anciens axes
corr.acp
princomp(corr.acp)
corr.acp <- corr.acp[,-c(1)] # ne prendre que les variables quantitatives
corr.acp
corr.acp.centered = scale(corr.acp, center = TRUE, scale = FALSE) # centrer les donn茅es en colonne
princomp(corr.acp)
princomp(corr.acp, scale = T)
princomp(corr.acp, cor = TRUE)
summary(princomp(corr.acp, cor = TRUE))
summary(pca_notes)
pca_notes <- princomp(corr.acp, cor = TRUE)
summary(pca_notes)
plot(pca_notes)
biplot(pca_notes)
predict(pca_notes)
screeplot(pca_notes)
screeplot(pca_notes)
princomp(crabsquant)
cor(crabsquant)
crabsquant
plot(crabsquant)
boxplot(crabsquant)
loadings(pca_notes)
ACP # coordonn茅es des points sur le nouveau rep猫re des composantes principales = combinaisons lin茅aires des anciens axes
corr.acp.covar = cov.wt(corr.acp.centered, method = "ML") # calcul de matrice de covariance avec centrage automatique
corr.acp.covar
corr.acp.covar.diago = eigen(corr.acp.covar$cov) # diagonaliser la covariance (pas les moyennes)
val_propres = corr.acp.covar.diago$values # valeurs propres = quantit茅s d'inertie expliqu茅e
vec_propres = corr.acp.covar.diago$vectors # vecteurs propres = vecteurs qui portent/expliquent les axes factoriels
vec_propres
val_propres
ACP = corr.acp.centered %*% vec_propres
ACP # coordonn茅es des points sur le nouveau rep猫re des composantes principales = combinaisons lin茅aires des anciens axes
cor(ACP, corr.acp.centered)
text(D[,1],D[,2])
plot(ACP)
ACP # coordonn茅es des points sur le nouveau rep猫re des composantes principales = combinaisons lin茅aires des anciens axes
points(1:4,1:4)
points(1:4,1:4)
a <- points(1,1)
a
a <- points(1:4,1:4)
a
cat("\014")
Pima <- read.csv("data/Pima.csv",header = T)
summary(Pima)
Pima <- read.csv("./data/Pima.csv",header = T)
setwd("E:\study\UTC\GI05\SY09\UTC_SY09_TPs\TP1\data")
setwd("E:/study/UTC/GI05/SY09/UTC_SY09_TPs/TP1/data")
Pima <- read.csv("./data/Pima.csv",header = T)
Pima <- read.csv("data/Pima.csv",header = T)
setwd("E:/study/UTC/GI05/SY09/UTC_SY09_TPs/TP1")
Pima <- read.csv("data/Pima.csv",header = T)
Pima
summary(Pima)
plot(Pima)
Pima$z
Pima <- read.csv("data/Pima.csv",header = T)
summary(Pima)
plot(Pima)
Pima$z <- factor(Pima$z)
Pima$z
class(Pima$z)
